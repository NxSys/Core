#auto texts

# %pkgname
# %classname
# %classname.tolower
# %php.ns
# %php.ndir

class-path-pattern: ../build/ExtensibleSystemClasses%php.ndir/%classname.php
iface-path-pattern: ../build/ExtensibleSystemClasses%php.ndir/I%classname.php

namespace: NxSys\Core\ExtensibleSystemClasses%php.ns
pkgname: NxSys.Core\ESC
composername: nxsys/core.esc

#remember: deny over allow
blacklist.classes:
	# - Closure
	# - SoapClient
	- Error
	- Exception
blacklist.exts:
	- soap	#@todo: soap ext, in all its broken-ness, is using PHP4 style constructors
	- fileinfo #@todo: @see soap
	- hrtime

whitelist.classes:
	# - StdClass
whitelist.exts:
	# - SPL

decorator.ns: NxSys\Core\ExtensibleSystemClasses
decorator: %decorator.ns\DecoratingTrait
decorator.type: %decorator.ns\IhasTraitDecorating

doc.default.desc: Std %classname wrapper support file

txt.file.doc: '''
	$BaseName$
	$Id$

	DESCRIPTION
	 %doc.default.desc

	@link http://nxsys.org/spaces/onx/wiki/Nexus_Common_Library
	@link https://onx.zulipchat.com

	@package %pkgname
	@license http://nxsys.org/spaces/onx/wiki/license
	Please see the license.txt file or the url above for full copyright and license information.
	@copyright Copyright 2018 Nexus Systems, inc.

	@author Chris R. Feamster <cfeamster@f2developments.com>
	@author $LastChangedBy$

	@version $Revision$

'''

txt.class.doc: '''
	%classname wrapper

	This class is technically a wrapper (or facade) for the internal PHP class.
	It also serves as a concretion of the respective interface so that its type
	may be used without having to create a reference class yourself.

	This class will implement a trait that allows direct proxying of calls to an
	underlying target object. Regardless of that magic, methods are "implemented"
	(but stubbed) so as to formally fulfill the contract required by the interface.

	Occasionally if an internal method returns one of these wrapped objects it
	will be *rewrapped* before being returned.

	@see \%classname
	@link http://php.net/manual/en/class.%classname.lower.php
	@author Chris R. Feamster <cfeamster@f2developments.com>
'''

txt.itype.doc: '''
	Interface for %classname

	This interface is an extraction of the prototype (contract) from the
	respective class and exposes it as standard interface. It allows you to
	1) typehint on this interface and not miscellaneous concretions and
	2) augment and replace code with standard OOP hierarchies. Essentially we're
	making these classes a little more SOLID.

	Note: Whith the presence of this interface (and related concretions) you can
	now easily experiment with partial extensions of the decorated base class.
	You are encouraged to do so, but do so with care as not all of the internal's
	operation is well documented...

	@see \%classname
	@link http://php.net/manual/en/class.%classname.lower.php
	@author Chris R. Feamster <cfeamster@f2developments.com>
'''

php.ctor.body: "$this->_refreshTarget(new PHP_%classname(...func_get_args()));"

php.parent-exec.call: "$this->__call(__FUNCTION__, func_get_args())"

php.parent-exec.callStatic: "$this->__callStatic(__FUNCTION__, func_get_args())"

php.concretions.body: "return %php.parent-exec.call;"

php.concretions.body.selfret: '''
        $ret=%php.parent-exec.call;
        if($ret===$this->_oTargetObject)
        {
            return $this;
        }
        if(!is_object($ret))
        {
        	return $ret;
        }
        $pfqcn='%namespace\\'.get_class($ret);
        if(class_exists($pfqcn) && isset(class_implements($pfqcn)['%decorator.type']))
        {
            return $pfqcn::_setTarget($ret);
        }

        return $ret;
'''

php.concretions.uopz.extend: "uopz_extend(%classname::class, PHP_%classname::class);"

# and now... of course
# ...the envitable..
# ------ E D G E   C A S E S ------

edgecases:
    #Return the current DirectoryIterator item.
	DirectoryIterator:current: '''
        $ret=%php.parent-exec.call;
        if($ret instanceof PHP_FilesystemIterator)
        {
            return self::_setTarget($ret);
        }
        if($ret instanceof PHP_SplFIleinfo)
        {
            return SplFileInfo::_setTarget($ret);
        }
        return $ret;
        '''
